__author__ = 'bbyk'

import gmpy2, codecs

from gmpy2 import mpz

N = mpz("179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581")
SNr = gmpy2.isqrt_rem(N)
A = SNr[0]
if SNr[1] > 0:
    A += 1
assert gmpy2.mul(A, A) > N

a_n = gmpy2.mul(A, A) - N

Xr = gmpy2.isqrt_rem(a_n)
assert Xr[1] == 0

p = A - Xr[0]
q = A + Xr[0]
assert gmpy2.mul(p, q) == N

print(p)
ct = mpz("22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540")
e = mpz(65537)
fN = N - p - q + 1
d = gmpy2.invert(e, fN)
assert gmpy2.powmod(gmpy2.mul(e, d), 2, fN) == 1

ptm = gmpy2.powmod(ct, d, N)
assert gmpy2.powmod(ptm, e, N) == ct
bts = gmpy2.to_binary(ptm)
bts = bytes(reversed(bts))
print(bts)
encode = codecs.encode(bts, "hex_codec").decode("ascii")
print (encode)

N = mpz("648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877")

SN = gmpy2.isqrt(N)
i = mpz(0)
while True:
    i += 1
    A = SN + i
    if gmpy2.mul(A, A) < N:
        continue

    a_n = gmpy2.mul(A, A) - N
    Xr = gmpy2.isqrt_rem(a_n)
    if Xr[1] != 0:
        continue

    p = A - Xr[0]
    q = A + Xr[0]
    assert gmpy2.mul(p, q) == N
    print(p)
    break
